apiVersion: zeabur.com/v1
kind: Template
metadata:
  name: Supabase
spec:
  description: An open source Firebase alternative. We're building the features of Firebase using enterprise-grade open source tools.
  coverImage: https://miro.medium.com/v2/resize:fit:1200/1*KllQKJSGK5QruqT8kIElEA.png
  icon: https://icons.zeabur.com/supabase.png
  variables:
    - key: PUBLIC_DOMAIN
      type: DOMAIN
      name: Domain
      description: What is the domain you want for your Supabase?
  tags:
    - CMS
    - Database
    - Tool
    - API
  readme: |
    Supabase is an open source Firebase alternative. We're building the features of Firebase using enterprise-grade open source tools.
    
    For full documentation, visit [supabase.com/docs](https://supabase.com/docs).
  services:
    - name: kong
      template: PREBUILT
      spec:
        id: kong
        name: kong
        icon: https://icons.zeabur.com/kong.svg
        source:
          image: kong:2.8.1
        ports:
          - id: web
            port: 8000
            type: HTTP
        env:
          ANON_KEY:
            default: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
            expose: true
          DASHBOARD_PASSWORD:
            default: this_password_is_insecure_and_should_be_updated
          DASHBOARD_USERNAME:
            default: supabase
          KONG_DATABASE:
            default: "off"
          KONG_DECLARATIVE_CONFIG:
            default: /home/kong/kong.yml
          KONG_DNS_ORDER:
            default: LAST,A,CNAME
          KONG_NGINX_PROXY_PROXY_BUFFER_SIZE:
            default: 160k
          KONG_NGINX_PROXY_PROXY_BUFFERS:
            default: 64 160k
          KONG_PLUGINS:
            default: request-transformer,cors,key-auth,acl,basic-auth
          SERVICE_ROLE_KEY:
            default: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q
            expose: true
          SUPABASE_ANON_KEY:
            default: ${ANON_KEY}
          SUPABASE_SERVICE_KEY:
            default: ${SERVICE_ROLE_KEY}
        configs:
          - path: /home/kong/kong.yml
            template: |
              _format_version: '2.1'
              _transform: true
              
              consumers:
                - username: DASHBOARD
                - username: anon
                  keyauth_credentials:
                    - key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
                - username: service_role
                  keyauth_credentials:
                    - key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q
              
              acls:
                - consumer: anon
                  group: anon
                - consumer: service_role
                  group: admin
              
              basicauth_credentials:
              - consumer: DASHBOARD
                username: supa
                password: supa
              
              services:
              
                ## Open Auth routes
                - name: auth-v1-open
                  url: http://auth:9999/verify
                  routes:
                    - name: auth-v1-open
                      strip_path: true
                      paths:
                        - /auth/v1/verify
                  plugins:
                    - name: cors
                - name: auth-v1-open-callback
                  url: http://auth:9999/callback
                  routes:
                    - name: auth-v1-open-callback
                      strip_path: true
                      paths:
                        - /auth/v1/callback
                  plugins:
                    - name: cors
                - name: auth-v1-open-authorize
                  url: http://auth:9999/authorize
                  routes:
                    - name: auth-v1-open-authorize
                      strip_path: true
                      paths:
                        - /auth/v1/authorize
                  plugins:
                    - name: cors
              
                ## Secure Auth routes
                - name: auth-v1
                  _comment: 'GoTrue: /auth/v1/* -> http://auth:9999/*'
                  url: http://auth:9999/
                  routes:
                    - name: auth-v1-all
                      strip_path: true
                      paths:
                        - /auth/v1/
                  plugins:
                    - name: cors
                    - name: key-auth
                      config:
                        hide_credentials: false
                    - name: acl
                      config:
                        hide_groups_header: true
                        allow:
                          - admin
                          - anon
              
                ## Secure REST routes
                - name: rest-v1
                  _comment: 'PostgREST: /rest/v1/* -> http://rest:3000/*'
                  url: http://rest:3000/
                  routes:
                    - name: rest-v1-all
                      strip_path: true
                      paths:
                        - /rest/v1/
                  plugins:
                    - name: cors
                    - name: key-auth
                      config:
                        hide_credentials: true
                    - name: acl
                      config:
                        hide_groups_header: true
                        allow:
                          - admin
                          - anon
              
                ## Secure GraphQL routes
                - name: graphql-v1
                  _comment: 'PostgREST: /graphql/v1/* -> http://rest:3000/rpc/graphql'
                  url: http://rest:3000/rpc/graphql
                  routes:
                    - name: graphql-v1-all
                      strip_path: true
                      paths:
                        - /graphql/v1
                  plugins:
                    - name: cors
                    - name: key-auth
                      config:
                        hide_credentials: true
                    - name: request-transformer
                      config:
                        add:
                          headers:
                            - Content-Profile:graphql_public
                    - name: acl
                      config:
                        hide_groups_header: true
                        allow:
                          - admin
                          - anon
              
                ## Secure Realtime routes
                - name: realtime-v1
                  _comment: 'Realtime: /realtime/v1/* -> ws://realtime:4000/socket/*'
                  url: http://realtime-dev:4000/socket/
                  routes:
                    - name: realtime-v1-all
                      strip_path: true
                      paths:
                        - /realtime/v1/
                  plugins:
                    - name: cors
                    - name: key-auth
                      config:
                        hide_credentials: false
                    - name: acl
                      config:
                        hide_groups_header: true
                        allow:
                          - admin
                          - anon
              
                ## Storage routes: the storage server manages its own auth
                - name: storage-v1
                  _comment: 'Storage: /storage/v1/* -> http://storage:5000/*'
                  url: http://storage:5000/
                  routes:
                    - name: storage-v1-all
                      strip_path: true
                      paths:
                        - /storage/v1/
                  plugins:
                    - name: cors
              
                ## Edge Functions routes
                - name: functions-v1
                  _comment: 'Edge Functions: /functions/v1/* -> http://functions:9000/*'
                  url: http://functions:9000/
                  routes:
                    - name: functions-v1-all
                      strip_path: true
                      paths:
                        - /functions/v1/
                  plugins:
                    - name: cors
              
                ## Analytics routes
                - name: analytics-v1
                  _comment: 'Analytics: /analytics/v1/* -> http://logflare:4000/*'
                  url: http://analytics:4000/
                  routes:
                    - name: analytics-v1-all
                      strip_path: true
                      paths:
                        - /analytics/v1/
              
                ## Secure Database routes
                - name: meta
                  _comment: 'pg-meta: /pg/* -> http://meta:8080/*'
                  url: http://meta:8080/
                  routes:
                    - name: meta-all
                      strip_path: true
                      paths:
                        - /pg/
                  plugins:
                    - name: key-auth
                      config:
                        hide_credentials: false
                    - name: acl
                      config:
                        hide_groups_header: true
                        allow:
                          - admin
              
                ## Protected Dashboard - catch all remaining routes
                - name: dashboard
                  _comment: 'Studio: /* -> http://studio:3000/*'
                  url: http://studio:3000/
                  routes:
                    - name: dashboard-all
                      strip_path: true
                      paths:
                        - /
                  plugins:
                    - name: cors
                    - name: basic-auth
                      config:
                        hide_credentials: true
      domainKey: PUBLIC_DOMAIN
    - name: studio
      template: PREBUILT
      spec:
        id: studio
        name: studio
        icon: https://icons.zeabur.com/supabase.png
        source:
          image: supabase/studio:20240514-6f5cabd
        ports:
          - id: web
            port: 3000
            type: HTTP
        env:
          DEFAULT_ORGANIZATION_NAME:
            default: Default Organization
          DEFAULT_PROJECT_NAME:
            default: Default Project
          HOSTNAME:
            default: 0.0.0.0
          LOGFLARE_API_KEY:
            default: ${LOGFLARE_API_KEY}
          LOGFLARE_URL:
            default: http://analytics.zeabur.internal:4000
          NEXT_ANALYTICS_BACKEND_PROVIDER:
            default: postgres
          NEXT_PUBLIC_ENABLE_LOGS:
            default: "true"
          PUBLIC_DOMAIN:
            required: true
          STUDIO_PG_META_URL:
            default: http://meta.zeabur.internal:8080
          SUPABASE_ANON_KEY:
            default: ${ANON_KEY}
          SUPABASE_PUBLIC_URL:
            default: https://${PUBLIC_DOMAIN}.zeabur.app
          SUPABASE_SERVICE_KEY:
            default: ${SERVICE_ROLE_KEY}
          SUPABASE_URL:
            default: http://kong.zeabur.internal:8000
    - name: db
      template: PREBUILT
      spec:
        id: postgres
        name: db
        icon: https://icons.zeabur.com/supabase.png
        source:
          image: supabase/postgres:15.1.1.41
        ports:
          - id: database
            port: 5432
            type: TCP
        volumes:
          - id: data
            dir: /var/lib/postgresql/data
        instructions:
          - type: TEXT
            title: Connection String
            content: postgresql://postgres:${POSTGRES_PASSWORD}@${PORT_FORWARDED_HOSTNAME}:${DATABASE_PORT_FORWARDED_PORT}/${POSTGRES_DB}
          - type: TEXT
            title: PostgreSQL Connect Command
            content: psql "postgresql://postgres:${POSTGRES_PASSWORD}@${PORT_FORWARDED_HOSTNAME}:${DATABASE_PORT_FORWARDED_PORT}/${POSTGRES_DB}"
          - type: TEXT
            title: PostgreSQL username
            content: postgres
            category: Credentials
          - type: PASSWORD
            title: PostgresSQL password
            content: ${POSTGRES_PASSWORD}
            category: Credentials
          - type: TEXT
            title: PostgresSQL database
            content: ${POSTGRES_DB}
            category: Credentials
          - type: TEXT
            title: PostgreSQL host
            content: ${PORT_FORWARDED_HOSTNAME}
            category: Hostname & Port
          - type: TEXT
            title: PostgreSQL port
            content: ${DATABASE_PORT_FORWARDED_PORT}
            category: Hostname & Port
        env:
          JWT_EXP:
            default: "3600"
            expose: true
          JWT_SECRET:
            required: true
            default: your-super-secret-jwt-token-with-at-least-32-characters-long
            expose: true
          PGDATABASE:
            default: postgres
          PGPASSWORD:
            default: ${POSTGRES_PASSWORD}
          PGPORT:
            default: "5432"
          POSTGRES_DB:
            default: postgres
          POSTGRES_HOST:
            default: /var/run/postgresql
          POSTGRES_PASSWORD:
            default: ${PASSWORD}
            expose: true
          POSTGRES_PORT:
            default: "5432"
            expose: true
        configs:
          - path: /docker-entrypoint-initdb.d/migrations/99-realtime.sql
            template: |
              create schema if not exists _realtime;
              alter schema _realtime owner to postgres;
          - path: /docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql
            template: |
              BEGIN;
                -- Create pg_net extension
                CREATE EXTENSION IF NOT EXISTS pg_net SCHEMA extensions;
                -- Create supabase_functions schema
                CREATE SCHEMA supabase_functions AUTHORIZATION supabase_admin;
                GRANT USAGE ON SCHEMA supabase_functions TO postgres, anon, authenticated, service_role;
                ALTER DEFAULT PRIVILEGES IN SCHEMA supabase_functions GRANT ALL ON TABLES TO postgres, anon, authenticated, service_role;
                ALTER DEFAULT PRIVILEGES IN SCHEMA supabase_functions GRANT ALL ON FUNCTIONS TO postgres, anon, authenticated, service_role;
                ALTER DEFAULT PRIVILEGES IN SCHEMA supabase_functions GRANT ALL ON SEQUENCES TO postgres, anon, authenticated, service_role;
                -- supabase_functions.migrations definition
                CREATE TABLE supabase_functions.migrations (
                  version text PRIMARY KEY,
                  inserted_at timestamptz NOT NULL DEFAULT NOW()
                );
                -- Initial supabase_functions migration
                INSERT INTO supabase_functions.migrations (version) VALUES ('initial');
                -- supabase_functions.hooks definition
                CREATE TABLE supabase_functions.hooks (
                  id bigserial PRIMARY KEY,
                  hook_table_id integer NOT NULL,
                  hook_name text NOT NULL,
                  created_at timestamptz NOT NULL DEFAULT NOW(),
                  request_id bigint
                );
                CREATE INDEX supabase_functions_hooks_request_id_idx ON supabase_functions.hooks USING btree (request_id);
                CREATE INDEX supabase_functions_hooks_h_table_id_h_name_idx ON supabase_functions.hooks USING btree (hook_table_id, hook_name);
                COMMENT ON TABLE supabase_functions.hooks IS 'Supabase Functions Hooks: Audit trail for triggered hooks.';
                CREATE FUNCTION supabase_functions.http_request()
                  RETURNS trigger
                  LANGUAGE plpgsql
                  AS $function$
                  DECLARE
                    request_id bigint;
                    payload jsonb;
                    url text := TG_ARGV[0]::text;
                    method text := TG_ARGV[1]::text;
                    headers jsonb DEFAULT '{}'::jsonb;
                    params jsonb DEFAULT '{}'::jsonb;
                    timeout_ms integer DEFAULT 1000;
                  BEGIN
                    IF url IS NULL OR url = 'null' THEN
                      RAISE EXCEPTION 'url argument is missing';
                    END IF;
              
                    IF method IS NULL OR method = 'null' THEN
                      RAISE EXCEPTION 'method argument is missing';
                    END IF;
              
                    IF TG_ARGV[2] IS NULL OR TG_ARGV[2] = 'null' THEN
                      headers = '{"Content-Type": "application/json"}'::jsonb;
                    ELSE
                      headers = TG_ARGV[2]::jsonb;
                    END IF;
              
                    IF TG_ARGV[3] IS NULL OR TG_ARGV[3] = 'null' THEN
                      params = '{}'::jsonb;
                    ELSE
                      params = TG_ARGV[3]::jsonb;
                    END IF;
              
                    IF TG_ARGV[4] IS NULL OR TG_ARGV[4] = 'null' THEN
                      timeout_ms = 1000;
                    ELSE
                      timeout_ms = TG_ARGV[4]::integer;
                    END IF;
              
                    CASE
                      WHEN method = 'GET' THEN
                        SELECT http_get INTO request_id FROM net.http_get(
                          url,
                          params,
                          headers,
                          timeout_ms
                        );
                      WHEN method = 'POST' THEN
                        payload = jsonb_build_object(
                          'old_record', OLD,
                          'record', NEW,
                          'type', TG_OP,
                          'table', TG_TABLE_NAME,
                          'schema', TG_TABLE_SCHEMA
                        );
              
                        SELECT http_post INTO request_id FROM net.http_post(
                          url,
                          payload,
                          params,
                          headers,
                          timeout_ms
                        );
                      ELSE
                        RAISE EXCEPTION 'method argument % is invalid', method;
                    END CASE;
              
                    INSERT INTO supabase_functions.hooks
                      (hook_table_id, hook_name, request_id)
                    VALUES
                      (TG_RELID, TG_NAME, request_id);
              
                    RETURN NEW;
                  END
                $function$;
                -- Supabase super admin
                DO
                $$
                BEGIN
                  IF NOT EXISTS (
                    SELECT 1
                    FROM pg_roles
                    WHERE rolname = 'supabase_functions_admin'
                  )
                  THEN
                    CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
                  END IF;
                END
                $$;
                GRANT ALL PRIVILEGES ON SCHEMA supabase_functions TO supabase_functions_admin;
                GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA supabase_functions TO supabase_functions_admin;
                GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA supabase_functions TO supabase_functions_admin;
                ALTER USER supabase_functions_admin SET search_path = "supabase_functions";
                ALTER table "supabase_functions".migrations OWNER TO supabase_functions_admin;
                ALTER table "supabase_functions".hooks OWNER TO supabase_functions_admin;
                ALTER function "supabase_functions".http_request() OWNER TO supabase_functions_admin;
                GRANT supabase_functions_admin TO postgres;
                -- Remove unused supabase_pg_net_admin role
                DO
                $$
                BEGIN
                  IF EXISTS (
                    SELECT 1
                    FROM pg_roles
                    WHERE rolname = 'supabase_pg_net_admin'
                  )
                  THEN
                    REASSIGN OWNED BY supabase_pg_net_admin TO supabase_admin;
                    DROP OWNED BY supabase_pg_net_admin;
                    DROP ROLE supabase_pg_net_admin;
                  END IF;
                END
                $$;
                -- pg_net grants when extension is already enabled
                DO
                $$
                BEGIN
                  IF EXISTS (
                    SELECT 1
                    FROM pg_extension
                    WHERE extname = 'pg_net'
                  )
                  THEN
                    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;
                    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
                    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
                    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
                    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
                    REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
                    REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
                    GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
                    GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
                  END IF;
                END
                $$;
                -- Event trigger for pg_net
                CREATE OR REPLACE FUNCTION extensions.grant_pg_net_access()
                RETURNS event_trigger
                LANGUAGE plpgsql
                AS $$
                BEGIN
                  IF EXISTS (
                    SELECT 1
                    FROM pg_event_trigger_ddl_commands() AS ev
                    JOIN pg_extension AS ext
                    ON ev.objid = ext.oid
                    WHERE ext.extname = 'pg_net'
                  )
                  THEN
                    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;
                    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
                    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
                    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
                    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
                    REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
                    REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
                    GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
                    GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
                  END IF;
                END;
                $$;
                COMMENT ON FUNCTION extensions.grant_pg_net_access IS 'Grants access to pg_net';
                DO
                $$
                BEGIN
                  IF NOT EXISTS (
                    SELECT 1
                    FROM pg_event_trigger
                    WHERE evtname = 'issue_pg_net_access'
                  ) THEN
                    CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end WHEN TAG IN ('CREATE EXTENSION')
                    EXECUTE PROCEDURE extensions.grant_pg_net_access();
                  END IF;
                END
                $$;
                INSERT INTO supabase_functions.migrations (version) VALUES ('20210809183423_update_grants');
                ALTER function supabase_functions.http_request() SECURITY DEFINER;
                ALTER function supabase_functions.http_request() SET search_path = supabase_functions;
                REVOKE ALL ON FUNCTION supabase_functions.http_request() FROM PUBLIC;
                GRANT EXECUTE ON FUNCTION supabase_functions.http_request() TO postgres, anon, authenticated, service_role;
              COMMIT;
          - path: /docker-entrypoint-initdb.d/init-scripts/99-roles.sql
            template: |
              \set pgpass `echo "$POSTGRES_PASSWORD"`
              
              ALTER USER authenticator WITH PASSWORD :'pgpass';
              ALTER USER pgbouncer WITH PASSWORD :'pgpass';
              ALTER USER supabase_auth_admin WITH PASSWORD :'pgpass';
              ALTER USER supabase_functions_admin WITH PASSWORD :'pgpass';
              ALTER USER supabase_storage_admin WITH PASSWORD :'pgpass';
          - path: /docker-entrypoint-initdb.d/init-scripts/99-jwt.sql
            template: |
              \set jwt_secret `echo "$JWT_SECRET"`
              \set jwt_exp `echo "$JWT_EXP"`
              
              ALTER DATABASE postgres SET "app.settings.jwt_secret" TO :'jwt_secret';
              ALTER DATABASE postgres SET "app.settings.jwt_exp" TO :'jwt_exp';
          - path: /docker-entrypoint-initdb.d/migrations/99-logs.sql
            template: |
              create schema if not exists _analytics;
              alter schema _analytics owner to postgres;
          - path: /etc/postgresql/pg_hba.conf
            template: |
              # PostgreSQL Client Authentication Configuration File
              # ===================================================
              #
              # Refer to the "Client Authentication" section in the PostgreSQL
              # documentation for a complete description of this file.  A short
              # synopsis follows.
              #
              # This file controls: which hosts are allowed to connect, how clients
              # are authenticated, which PostgreSQL user names they can use, which
              # databases they can access.  Records take one of these forms:
              #
              # local         DATABASE  USER  METHOD  [OPTIONS]
              # host          DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
              # hostssl       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
              # hostnossl     DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
              # hostgssenc    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
              # hostnogssenc  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
              #
              # (The uppercase items must be replaced by actual values.)
              #
              # The first field is the connection type: "local" is a Unix-domain
              # socket, "host" is either a plain or SSL-encrypted TCP/IP socket,
              # "hostssl" is an SSL-encrypted TCP/IP socket, and "hostnossl" is a
              # non-SSL TCP/IP socket.  Similarly, "hostgssenc" uses a
              # GSSAPI-encrypted TCP/IP socket, while "hostnogssenc" uses a
              # non-GSSAPI socket.
              #
              # DATABASE can be "all", "sameuser", "samerole", "replication", a
              # database name, or a comma-separated list thereof. The "all"
              # keyword does not match "replication". Access to replication
              # must be enabled in a separate record (see example below).
              #
              # USER can be "all", a user name, a group name prefixed with "+", or a
              # comma-separated list thereof.  In both the DATABASE and USER fields
              # you can also write a file name prefixed with "@" to include names
              # from a separate file.
              #
              # ADDRESS specifies the set of hosts the record matches.  It can be a
              # host name, or it is made up of an IP address and a CIDR mask that is
              # an integer (between 0 and 32 (IPv4) or 128 (IPv6) inclusive) that
              # specifies the number of significant bits in the mask.  A host name
              # that starts with a dot (.) matches a suffix of the actual host name.
              # Alternatively, you can write an IP address and netmask in separate
              # columns to specify the set of hosts.  Instead of a CIDR-address, you
              # can write "samehost" to match any of the server's own IP addresses,
              # or "samenet" to match any address in any subnet that the server is
              # directly connected to.
              #
              # METHOD can be "trust", "reject", "md5", "password", "scram-sha-256",
              # "gss", "sspi", "ident", "peer", "pam", "ldap", "radius" or "cert".
              # Note that "password" sends passwords in clear text; "md5" or
              # "scram-sha-256" are preferred since they send encrypted passwords.
              #
              # OPTIONS are a set of options for the authentication in the format
              # NAME=VALUE.  The available options depend on the different
              # authentication methods -- refer to the "Client Authentication"
              # section in the documentation for a list of which options are
              # available for which authentication methods.
              #
              # Database and user names containing spaces, commas, quotes and other
              # special characters must be quoted.  Quoting one of the keywords
              # "all", "sameuser", "samerole" or "replication" makes the name lose
              # its special character, and just match a database or username with
              # that name.
              #
              # This file is read on server startup and when the server receives a
              # SIGHUP signal.  If you edit the file on a running system, you have to
              # SIGHUP the server for the changes to take effect, run "pg_ctl reload",
              # or execute "SELECT pg_reload_conf()".
              #
              # Put your actual configuration here
              # ----------------------------------
              #
              # If you want to allow non-local connections, you need to add more
              # "host" records.  In that case you will also need to make PostgreSQL
              # listen on a non-local interface via the listen_addresses
              # configuration parameter, or via the -i or -h command line switches.
              
              # TYPE  DATABASE        USER            ADDRESS                 METHOD
              
              # Default:
              # "local" is for Unix domain socket connections only
              local  all  all    peer
              # IPv4 local connections:
              host  all  all  127.0.0.1/32  trust
              # IPv6 local connections:
              host  all  all  ::1/128  scram-sha-256
              # Local root Unix user, passwordless access
              local  all  postgres    peer map=root_as_postgres
              # IPv4 external connections
              host  all  all  0.0.0.0/0  scram-sha-256
              
              # MD5 hashed password hosts
              
              # Password hosts
              
              # Trusted hosts
              
              # User custom
    - name: meta
      template: PREBUILT
      spec:
        id: meta
        name: meta
        icon: https://icons.zeabur.com/supabase.png
        source:
          image: supabase/postgres-meta:v0.79.5
        ports:
          - id: web
            port: 8080
            type: HTTP
        env:
          PG_META_DB_HOST:
            default: db.zeabur.internal
          PG_META_DB_NAME:
            default: postgres
          PG_META_DB_PASSWORD:
            default: ${POSTGRES_PASSWORD}
          PG_META_DB_PORT:
            default: "5432"
          PG_META_DB_USER:
            default: postgres
          PG_META_PORT:
            default: "8080"
    - name: rest
      template: PREBUILT
      spec:
        id: rest
        name: rest
        icon: https://icons.zeabur.com/supabase.png
        source:
          image: postgrest/postgrest:v12.0.1
        ports:
          - id: web
            port: 3000
            type: HTTP
        env:
          PGRST_APP_SETTINGS_JWT_EXP:
            default: ${JWT_EXP}
          PGRST_APP_SETTINGS_JWT_SECRET:
            default: ${JWT_SECRET}
          PGRST_DB_ANON_ROLE:
            default: anon
          PGRST_DB_URI:
            default: postgres://postgres:${POSTGRES_PASSWORD}@db.zeabur.internal:5432/postgres
          PGRST_DB_USE_LEGACY_GUCS:
            default: "false"
          PGRST_JWT_SECRET:
            default: ${JWT_SECRET}
    - name: auth
      template: PREBUILT
      spec:
        id: auth
        name: auth
        icon: https://icons.zeabur.com/supabase.png
        source:
          image: supabase/gotrue:v2.151.0
        ports:
          - id: web
            port: 9999
            type: HTTP
        env:
          API_EXTERNAL_URL:
            default: https://${PUBLIC_DOMAIN}.zeabur.app
          GOTRUE_API_HOST:
            default: 0.0.0.0
          GOTRUE_API_PORT:
            default: "9999"
          GOTRUE_DB_DATABASE_URL:
            default: postgres://postgres:${POSTGRES_PASSWORD}@db.zeabur.internal:5432/postgres?sslmode=disable&options=-csearch_path=auth
          GOTRUE_DB_DRIVER:
            default: postgres
          GOTRUE_DISABLE_SIGNUP:
            default: "false"
          GOTRUE_EXTERNAL_EMAIL_ENABLED:
            default: "true"
          GOTRUE_EXTERNAL_PHONE_ENABLED:
            default: "false"
          GOTRUE_JWT_ADMIN_ROLES:
            default: service_role
          GOTRUE_JWT_AUD:
            default: authenticated
          GOTRUE_JWT_DEFAULT_GROUP_NAME:
            default: authenticated
          GOTRUE_JWT_EXP:
            default: "3600"
          GOTRUE_JWT_SECRET:
            default: your-super-secret-jwt-token-with-at-least-32-characters-long
          GOTRUE_MAILER_AUTOCONFIRM:
            default: "false"
          GOTRUE_MAILER_URLPATHS_CONFIRMATION:
            default: ""
          GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE:
            default: ""
          GOTRUE_MAILER_URLPATHS_INVITE:
            default: ""
          GOTRUE_MAILER_URLPATHS_RECOVERY:
            default: ""
          GOTRUE_SITE_URL:
            default: http://auth.zeabur.internal:9999
          GOTRUE_SMS_AUTOCONFIRM:
            default: "false"
          GOTRUE_SMTP_ADMIN_EMAIL:
            default: admin@example.com
          GOTRUE_SMTP_HOST:
            default: smtp.resend.com
          GOTRUE_SMTP_PASS:
            default: fake_mail_password
          GOTRUE_SMTP_PORT:
            default: "25"
          GOTRUE_SMTP_SENDER_NAME:
            default: fake_sender
          GOTRUE_SMTP_USER:
            default: fake_mail_user
          GOTRUE_URI_ALLOW_LIST:
            default: ""
          PUBLIC_DOMAIN:
            required: true
    - name: minio
      template: PREBUILT
      spec:
        id: minio
        name: minio
        tags:
          - Storage
          - S3
        icon: https://raw.githubusercontent.com/zeabur/service-icons/main/marketplace/minio.svg
        source:
          image: quay.io/minio/minio:latest
          command:
            - /bin/sh
          args:
            - -c
            - |
              minio server /data --console-address :9090 &
              MINIO_PID=$!
              while ! curl -s http://localhost:9000/minio/health/live; do
                echo 'Waiting for MinIO to start...'
                sleep 1
              done
              sleep 5
              mc alias set myminio http://localhost:9000 $MINIO_USERNAME $MINIO_PASSWORD
              echo "Creating bucket '$MINIO_DEFAULT_BUCKET'"
              mc mb myminio/$MINIO_DEFAULT_BUCKET
              wait $MINIO_PID
        ports:
          - id: web
            port: 9000
            type: HTTP
          - id: console
            port: 9090
            type: HTTP
        volumes:
          - id: data
            dir: /data
        instructions:
          - type: URL
            title: Go to MinIO Console
            content: ${MINIO_CONSOLE_URL}
          - type: TEXT
            title: MinIO Username
            content: ${MINIO_USERNAME}
          - type: PASSWORD
            title: MinIO Password
            content: ${MINIO_PASSWORD}
        env:
          MINIO_DEFAULT_BUCKET:
            default: stub
            expose: true
          MINIO_BROWSER_REDIRECT:
            default: "false"
          MINIO_CONSOLE_URL:
            default: ${ZEABUR_CONSOLE_URL}
            expose: true
            readonly: true
          MINIO_PASSWORD:
            default: ${MINIO_ROOT_PASSWORD}
            expose: true
            readonly: true
          MINIO_ROOT_PASSWORD:
            default: ${PASSWORD}
          MINIO_ROOT_USER:
            default: minio
          MINIO_USERNAME:
            default: ${MINIO_ROOT_USER}
            expose: true
            readonly: true
    - name: storage
      template: PREBUILT
      spec:
        id: storage
        name: storage
        icon: https://icons.zeabur.com/supabase.png
        source:
          image: supabase/storage-api:v1.0.6
        ports:
          - id: web
            port: 5000
            type: HTTP
        env:
          ANON_KEY:
            default: ${ANON_KEY}
          AWS_ACCESS_KEY_ID:
            default: ${MINIO_USERNAME}
          AWS_DEFAULT_REGION:
            default: stub
          AWS_SECRET_ACCESS_KEY:
            default: ${MINIO_PASSWORD}
          DATABASE_URL:
            default: postgres://postgres:${POSTGRES_PASSWORD}@db.zeabur.internal:5432/postgres
          ENABLE_IMAGE_TRANSFORMATION:
            default: "true"
          FILE_SIZE_LIMIT:
            default: "52428800"
          FILE_STORAGE_BACKEND_PATH:
            default: /var/lib/storage
          GLOBAL_S3_BUCKET:
            default: ${MINIO_DEFAULT_BUCKET}
          GLOBAL_S3_ENDPOINT:
            default: http://minio.zeabur.internal:9000
          GLOBAL_S3_FORCE_PATH_STYLE:
            default: "true"
          GLOBAL_S3_PROTOCOL:
            default: http
          IMGPROXY_URL:
            default: http://imgproxy:5001
          PGRST_JWT_SECRET:
            default: ${JWT_SECRET}
          POSTGREST_URL:
            default: http://rest.zeabur.internal:3000
          REGION:
            default: stub
          SERVICE_KEY:
            default: ${SERVICE_ROLE_KEY}
          STORAGE_BACKEND:
            default: s3
          TENANT_ID:
            default: stub
    - name: realtime
      template: PREBUILT
      spec:
        id: realtime
        name: realtime
        icon: https://icons.zeabur.com/supabase.png
        source:
          image: supabase/realtime:v2.25.66
        ports:
          - id: web
            port: 4000
            type: HTTP
        env:
          API_JWT_SECRET:
            default: ${JWT_SECRET}
          DB_AFTER_CONNECT_QUERY:
            default: SET search_path TO _realtime
          DB_ENC_KEY:
            default: supabaserealtime
          DB_HOST:
            default: db.zeabur.internal
          DB_NAME:
            default: postgres
          DB_PASSWORD:
            default: ${POSTGRES_PASSWORD}
          DB_PORT:
            default: "5432"
          DB_USER:
            default: postgres
          DNS_NODES:
            default: ""
          ENABLE_TAILSCALE:
            default: "false"
          ERL_AFLAGS:
            default: -proto_dist inet_tcp
          FLY_ALLOC_ID:
            default: fly123
          FLY_APP_NAME:
            default: realtime
          PORT:
            default: "4000"
          SECRET_KEY_BASE:
            default: UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq
